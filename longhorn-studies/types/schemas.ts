/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./database";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const graphqlPublicGraphqlArgsSchemaSchema = z.object({
  operationName: z.string().optional(),
  query: z.string().optional(),
  variables: jsonSchema.optional(),
  extensions: jsonSchema.optional(),
});

export const graphqlPublicGraphqlReturnsSchemaSchema = jsonSchema;

export const publicMediaRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  id: z.string(),
  position: z.number().nullable(),
  spot_id: z.string().nullable(),
  storage_key: z.string(),
});

export const publicMediaInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  position: z.number().optional().nullable(),
  spot_id: z.string().optional().nullable(),
  storage_key: z.string(),
});

export const publicMediaUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  position: z.number().optional().nullable(),
  spot_id: z.string().optional().nullable(),
  storage_key: z.string().optional(),
});

export const publicMediaRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("media_spot_id_fkey"),
    columns: z.tuple([z.literal("spot_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("spots"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_spot_id_fkey"),
    columns: z.tuple([z.literal("spot_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("spots_with_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProfilesRowSchemaSchema = z.object({
  avatar_url: z.string().nullable(),
  full_name: z.string().nullable(),
  id: z.string(),
  updated_at: z.string().nullable(),
  username: z.string().nullable(),
});

export const publicProfilesInsertSchemaSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const publicProfilesUpdateSchemaSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const publicSpotTagsRowSchemaSchema = z.object({
  spot_id: z.string(),
  tag_id: z.number(),
});

export const publicSpotTagsInsertSchemaSchema = z.object({
  spot_id: z.string(),
  tag_id: z.number(),
});

export const publicSpotTagsUpdateSchemaSchema = z.object({
  spot_id: z.string().optional(),
  tag_id: z.number().optional(),
});

export const publicSpotTagsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("spot_tags_spot_id_fkey"),
    columns: z.tuple([z.literal("spot_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("spots"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("spot_tags_spot_id_fkey"),
    columns: z.tuple([z.literal("spot_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("spots_with_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("spot_tags_tag_id_fkey"),
    columns: z.tuple([z.literal("tag_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tags"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicSpotsRowSchemaSchema = z.object({
  body: z.string().nullable(),
  created_at: z.string().nullable(),
  id: z.string(),
  location: z.unknown(),
  title: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
});

export const publicSpotsInsertSchemaSchema = z.object({
  body: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  location: z.object({
    latitude: z.number(),
    longitude: z.number(),
  }),
  title: z.string(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const publicSpotsUpdateSchemaSchema = z.object({
  body: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  location: z.unknown().optional(),
  title: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const publicTagsRowSchemaSchema = z.object({
  id: z.number(),
  is_system: z.boolean().nullable(),
  label: z.string(),
  slug: z.string(),
});

export const publicTagsInsertSchemaSchema = z.object({
  id: z.never().optional(),
  is_system: z.boolean().optional().nullable(),
  label: z.string(),
  slug: z.string(),
});

export const publicTagsUpdateSchemaSchema = z.object({
  id: z.never().optional(),
  is_system: z.boolean().optional().nullable(),
  label: z.string().optional(),
  slug: z.string().optional(),
});

export const publicSpotsWithDetailsRowSchemaSchema = z.object({
  body: z.string().nullable(),
  created_at: z.string().nullable(),
  id: z.string().nullable(),
  latitude: z.number().nullable(),
  longitude: z.number().nullable(),
  media: jsonSchema.nullable(),
  tags: jsonSchema.nullable(),
  title: z.string().nullable(),
  updated_at: z.string().nullable(),
  user_id: z.string().nullable(),
});

export const publicSlugifyArgsSchemaSchema = z.object({
  txt: z.string(),
});

export const publicSlugifyReturnsSchemaSchema = z.string();

export const publicUpsertTagsArgsSchemaSchema = z.object({
  label_list: z.array(z.string()),
});

export const publicUpsertTagsReturnsSchemaSchema = z.array(
  z.object({
    id: z.number(),
    is_system: z.boolean().nullable(),
    label: z.string(),
    slug: z.string(),
  }),
);
